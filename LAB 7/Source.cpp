#include <iostream>
using namespace std;

int b[20000][20000] = {};

int main()
{
	cout << "error" << endl;
	for (int i = 0; i < 100000000000; i++)
	{
		long long * b = new long long;
		(*b) = 1;
		delete b;
	};
}
// 1. ДМНАМИЧЕСКАЯ ПАМЯТЬ
// Стэковая память ограничена, при неправильном использовании
// стек переполняется (stack overflow)
// int b[100000][100000] = {}; - ПЕРЕПОЛНЕНИЕ СТЭКА

//Операционной системой для приложения может быть выделена особоая область памяти
// которая назывется динамической. Она ограничена лишь ресурсами ПК

// 2. СИНТАКСИС
// динамическая ОП выделяктся с помощью оператора new
// работа с данными в динамической ОП ведется через указатели
// тип_данных * имя_переменной = new тип_данных
// double * var_dbl = = new double;

// 3. УТЕЧКА И ПЕРЕПОЛНЕНИЕ ПАМЯТИ
// Каждую выделенную порцию динамическойпамяти ОС закрепляет за прилоением
// если от неё потеряется указатель, обьем динамической ОП все равно остается за приложением
// потенциально, при неправильном использовании памяти , приложение может захватить всю ОП
// указатель на каждую выделенную порцию ДП необходим хранить
// пока она используется, а затем применить опреатор delete для открепления
// порции ДП
// delete var_dbl;

// 4. ВЫДЕЛЕНИЕ МАССИВОВ В ДИНАМИЧЕСКОЙ ПАМЯТИ//
// сразу выделить блок памяти под все элементы массива нельзя
// под каждую размерность многомерного массива выделяется по одномерному массиву
// например, если необходимо выделить двухмерный массив сначала создаётся одномерный,
// содержащий указатели на каждую строку, а затем создаются строки
// С многомерными аналогично, только вложенности больше
// Иными словами в оперативной памяти создаётся структура, связывающая отдельно
// выделенные строки в массив нужной размерности
// Удаляются массивы также построчно с помощью оператора delete[] (скобки пустые)
// НАчать удалять необходимо с самой младшей размерности

// 1D массив
// тип_данных * имя = new * тип_данных[размер]

// 2D массив
// тип_данных ** имя = new ** тип_данных[размер1]
// for(int i; i < размер1; i++) {имя[i] = new тип_данных[размер2]}
// for(int i; i < размер1; i++) {delete[] =  имя [i]}
// delete [] имя

// _____!!!!!ДОПИСАТЬ УДАЛЕНИЕ 3D!!!!!_____

// 3D массив
// for(int i; i < размер1; i++)
//{
//  имя[i] = new ** тип_данных[размер2]
//      for (int j; j < размер2; j++)
//  {
//          имя[i][j] = new тип_данных[размер3]
//  }
//}
// тип_данных *** имя = new *** тип_данных[размер]
//
//