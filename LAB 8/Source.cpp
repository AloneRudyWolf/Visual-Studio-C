#include <cstring>
#include <iostream>
#include <string>
#include <fstream>
#include <bitset>

using namespace std;
/*СТРОКИ И ФАЙЛЫ*/


// Строки старого С-типа представляют из себя массив символов с нулевым окончанием

char cstr1[] = "C-style string1";
char cstr2[] = { 'C', '-', 's', 't', 'y', 'l', 'e', ' ', 's', 't', 'r', 'i', 'n', 'g', '2', '\0' };
char cstr3[] = { 'C', '-','s','t','l','e',' ','s','t','r','i','n','g' };//строка без нулевого окончания(неправильная)

// функции для работы с С-строками

// вывод на печать printf(char[], , ,)

// с помощью printf можно не просто печатать готовую строку
// но и подставлять в нее другие переменные, попутно преобразовывая их
// в символьный вид и применяя форматирование
// форматирование printf("базовая %s строка %f", параметр1, параметр2")

// позиции, куда будут подставляться параметры, обозначаются в базовой строке
// символом %

// значение символов форматирования берётся из таблицы справки к функции http://www.cplusplus.com/reference/cstdio/printf/
// значение некоторых из них
// %f - параметр представляется на место %f, оформленное в виде числа с плавающей точкой
// %s - параметр подставляется на место %s как строка
// %d - параметр подставляется на место %d как целое число
// %e - параметр подставляется на место %e как число в экспоненциальном виде

// объединение строк strcat(*char, *char)
// копирование из одной строки в другую strcpy()
// сравнение strcmp()
// длина строки strlen()


// в стандартной библиотеке С++ массив символов инкапсуллирован в класс std::string,
// в который так же собраны самые частоиспользуемые методы обработки,
// и для которого перегружены операторы

std::string cppstr1 = " C++ - style string ";
std::string cppstr2 = " C++ - style string ";

int main()
{
	printf(cstr1);
	printf("\n");
	printf(cstr3);// автоматически перенос не делается


	printf("Parmetr1 = %10f, parameter2 = %d, parametr3 = %s\n\n ", 1.5, 100, "\" some string\ ");
	char place_to_copy[255];
	char place_from_copy[255] = "abcdefghijklmn";
	strcpy_s(place_to_copy, 254, place_from_copy);
	printf("Result = %s", place_to_copy);
	//1)
	strcat_s(cstr1, 255, cstr2);
	printf(cstr1); // обьединение строк и их вывод
	cout << '\n';
	//2)
	strcpy_s(place_to_copy, 255, cstr2);
	printf_s("Result = %s", place_to_copy);
	//3)
	cout << '\n';
	strcmp(cstr1, cstr2);

	cout << (strcmp(cstr1, cstr2));// если выводит "1" ,то 1 строка больше 2,если "-1" ,то 2 больше 1

	//4)
	cout << '\n';
	cout << "Длинна строки - " << (strlen(cstr1)) << " символов";




	getchar();
	return 0;

}
// 3. ПРОЧИЕ СТРОКОВЫЕ ФУНКЦИИ
// объединение (конкатенация) строк strcat(*char, *char)
// копирование из одной строки в другую strcpy()
// сравнение strcmp ()
//чтение строки с консоли scanf(*char,параметр)
// длина строки strlen()
// вставка строки в строку производится в несколько действий



//4. СТРОКА С++
//В стандартной библиотеке с++ массив символов инкапсулирован в Класс std::string
//в который также собраны самые часто используемые методы обработки
//(конкатенация, подсчет длины, вставка, удаление, поиск и т.д
//и для которого перегружены операторы + (кокатенация), ввод, вывод, и т.д
//еще одно отличие от строк с - длина строки теперь задается отдельным числом,
//хранящимся в классе